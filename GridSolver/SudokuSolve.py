# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _SudokuSolve
else:
    import _SudokuSolve

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


UNASSIGNED = _SudokuSolve.UNASSIGNED
class Sudoku(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _SudokuSolve.Sudoku_swiginit(self, _SudokuSolve.new_Sudoku(*args))

    def createSeed(self):
        return _SudokuSolve.Sudoku_createSeed(self)

    def printGrid(self):
        return _SudokuSolve.Sudoku_printGrid(self)

    def solveGrid(self):
        return _SudokuSolve.Sudoku_solveGrid(self)

    def getGrid(self):
        return _SudokuSolve.Sudoku_getGrid(self)

    def countSoln(self, number):
        return _SudokuSolve.Sudoku_countSoln(self, number)

    def genPuzzle(self):
        return _SudokuSolve.Sudoku_genPuzzle(self)

    def verifyGridStatus(self):
        return _SudokuSolve.Sudoku_verifyGridStatus(self)

    def printSVG(self, arg2):
        return _SudokuSolve.Sudoku_printSVG(self, arg2)

    def calculateDifficulty(self):
        return _SudokuSolve.Sudoku_calculateDifficulty(self)

    def branchDifficultyScore(self):
        return _SudokuSolve.Sudoku_branchDifficultyScore(self)
    __swig_destroy__ = _SudokuSolve.delete_Sudoku

# Register Sudoku in _SudokuSolve:
_SudokuSolve.Sudoku_swigregister(Sudoku)


def genRandNum(maxLimit):
    return _SudokuSolve.genRandNum(maxLimit)

def FindUnassignedLocation(grid, row, col):
    return _SudokuSolve.FindUnassignedLocation(grid, row, col)

def UsedInRow(grid, row, num):
    return _SudokuSolve.UsedInRow(grid, row, num)

def UsedInCol(grid, col, num):
    return _SudokuSolve.UsedInCol(grid, col, num)

def UsedInBox(grid, boxStartRow, boxStartCol, num):
    return _SudokuSolve.UsedInBox(grid, boxStartRow, boxStartCol, num)

def isSafe(grid, row, col, num):
    return _SudokuSolve.isSafe(grid, row, col, num)

def main(argc, argv):
    return _SudokuSolve.main(argc, argv)


